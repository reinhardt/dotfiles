#!/usr/bin/env python3
import json
import os
import re
import subprocess
import sys


TRACKING_FILE = os.path.expanduser("~/Timetracking/current.txt")
OCTODON_BIN = "/usr/bin/env octodon"

with subprocess.Popen(
    "i3status", stdout=subprocess.PIPE, stdin=subprocess.DEVNULL
) as i3status:

    def print_line(message):
        """Non-buffered printing to stdout."""
        sys.stdout.write(message + "\n")
        sys.stdout.flush()

    def read_line():
        """Interrupted respecting reader for stdin."""
        # try reading a line, removing any extra whitespace
        try:
            line = i3status.stdout.readline().strip()
            # i3status sends EOF, or an empty line
            if not line:
                sys.exit(3)
            return line.decode("utf-8")
        # exit on ctrl-c
        except KeyboardInterrupt:
            sys.exit()

    # ignore first two lines (version etc.)
    print_line(read_line())
    print_line(read_line())

    while True:
        line, prefix = read_line(), ""
        # ignore comma at start of lines
        if line.startswith(","):
            line, prefix = line[1:], ","

        octodon_summary = subprocess.run(
            "timeout 3s {} --new-session --date=+0 total".format(OCTODON_BIN),
            stdout=subprocess.PIPE,
            shell=True,
        ).stdout
        octodon_summary = " {} ".format(octodon_summary.decode("utf-8").strip())

        last_line = ""
        if os.path.exists(TRACKING_FILE):
            with open(TRACKING_FILE, "r") as tracking_data:
                last_line = tracking_data.readlines()[-1].strip()
                if len(last_line) > 30:
                    last_line = " {}...{} ".format(last_line[:22].strip(), last_line[-5:].strip())

        pulse_sources = subprocess.run(
            "pulsemixer --list-sources",
            stdout=subprocess.PIPE,
            shell=True,
        ).stdout.decode("utf-8")
        sources = [
            re.search("ID: ([^,]*),", line).group(1)
            for line in pulse_sources.split("\n")
            if line.startswith("Source:") and "Monitor" not in line
        ]

        mic_mute = [
            int(
                subprocess.run(
                    f"pulsemixer --get-mute --id {source}",
                    stdout=subprocess.PIPE,
                    shell=True,
                ).stdout
            )
            for source in sources
        ]

        # helpdesk = subprocess.run(
        #    "timeout 3s jira --login=helpdesk@syslab.com list --named-query=new",
        #    stdout=subprocess.PIPE,
        #    shell=True,
        # ).stdout.decode("utf-8")
        # helpdesk_num = len([line for line in helpdesk.split("\n") if line.strip()])
        # helpdesk_color = "#dc322f" if helpdesk_num > 0 else None

        # new_mail = subprocess.run(
        #    "timeout 3s curl -u reinhardt@syslab.com:$(pass Mail/reinhardt@syslab.com) "
        #    "\"imaps://sslin.df.eu/INBOX?NEW\"",
        #    stdout=subprocess.PIPE,
        #    shell=True,
        # ).stdout.decode("utf-8").replace("* SEARCH", "").strip()

        data = json.loads(line)
        data = [
            {"name": "octodon_current", "markup": "none", "full_text": last_line},
            {
                "name": "octodon_summary",
                "markup": "none",
                "full_text": octodon_summary,
            },
            # {
            #    "name": "helpdesk_new",
            #    "markup": "none",
            #    "color": helpdesk_color,
            #    "full_text": "HLP {}".format(helpdesk_num),
            # },
            # {
            #    "name": "new_mail",
            #    "markup": "none",
            #    "full_text": "ðŸ“¬" if new_mail else "ðŸ“ª",
            # },
            {
                "name": "microphone_mute",
                "markup": "none",
                "full_text": "".join(["ðŸ”‡" if source else "ðŸŽ¤" for source in mic_mute]),
            },
        ] + data

        print_line(prefix + json.dumps(data))
