#!/usr/bin/env python3
import json
import os
import subprocess
import sys


TRACKING_DIR = os.path.expanduser("~/Timetracking/2021/")
OCTODON_BIN = "/usr/bin/env octodon"

with subprocess.Popen(
    "i3status", stdout=subprocess.PIPE, stdin=subprocess.DEVNULL
) as i3status:

    def print_line(message):
        """ Non-buffered printing to stdout. """
        sys.stdout.write(message + "\n")
        sys.stdout.flush()

    def read_line():
        """ Interrupted respecting reader for stdin. """
        # try reading a line, removing any extra whitespace
        try:
            line = i3status.stdout.readline().strip()
            # i3status sends EOF, or an empty line
            if not line:
                sys.exit(3)
            return line.decode("utf-8")
        # exit on ctrl-c
        except KeyboardInterrupt:
            sys.exit()

    # ignore first two lines (version etc.)
    print_line(read_line())
    print_line(read_line())

    while True:
        line, prefix = read_line(), ""
        # ignore comma at start of lines
        if line.startswith(","):
            line, prefix = line[1:], ","

        octodon_summary = subprocess.run(
            "timeout 3s {} --new-session --date=+0 total".format(OCTODON_BIN),
            stdout=subprocess.PIPE,
            shell=True,
        ).stdout
        octodon_summary = " {} ".format(octodon_summary.decode("utf-8").strip())

        last_line = ""
        if os.path.exists(TRACKING_DIR):
            tracking_files = os.listdir(TRACKING_DIR)
            tracking_files.sort(
                key=lambda f: os.stat(os.path.join(TRACKING_DIR, f)).st_mtime
            )
            newest_file = os.path.join(TRACKING_DIR, tracking_files[-1])
            with open(newest_file) as tracking_data:
                last_line = tracking_data.readlines()[-1]
                last_line = " {} ".format(last_line.strip())

        mic_mute = int(
            subprocess.run(
                "pulsemixer --get-mute --id source-1",
                stdout=subprocess.PIPE,
                shell=True,
            ).stdout
        )

        data = json.loads(line)
        data = [
            {"name": "octodon_current", "markup": "none", "full_text": last_line},
            {
                "name": "octodon_summary",
                "markup": "none",
                "full_text": octodon_summary,
            },
            {
                "name": "microphone_mute",
                "markup": "none",
                "full_text": "ðŸ”‡" if mic_mute else "ðŸŽ¤",
            },
        ] + data

        print_line(prefix + json.dumps(data))
